import React, { useEffect, useState } from 'react';
import Head from "next/head";
import { getProducts } from "../../utils/shopify";
import ProductCard from "@/components/ProductCard";
import ReactPaginate from "react-paginate";
import { GrNext, GrPrevious } from "react-icons/gr";

const Product = ({products}) => {
  const [currentImages, setCurrentImages] = useState(null);
  const [pageCount, setPageCount] = useState(0);
  const [imagesOffset, setImagesOffset] = useState(0);
  const [pd, setPd] = useState(products);
  const [fliter, setFilter] = useState("");

  const filterChangeValue = (el) => {
    setFilter(el.target.value);
  }

  useEffect(() => {
    let endOffset = imagesOffset + 8;
    setCurrentImages(pd.slice(imagesOffset, endOffset));
    setPageCount(Math.ceil(pd.length / 8));
  }, [pd, imagesOffset]);

  const handlePageClick = (event) => {
    const newOffset = (event.selected * 8) % pd.length;
    setImagesOffset(newOffset);
  };

  useEffect(() => {
    if(fliter === 'rating'){
      setPd(pd.sort((a, b) => { return Number(b.rating.value) - Number(a.rating.value); }));
    } else if(fliter === 'price-low-high'){
      setPd(pd.sort((a, b) => { return Number(a.priceRange.minVariantPrice.amount) - Number(b.priceRange.minVariantPrice.amount); }));
    } else if(fliter === 'price-high-low'){
      setPd(pd.sort((a, b) => { return Number(b.priceRange.minVariantPrice.amount) - Number(a.priceRange.minVariantPrice.amount); }));
    } else if(fliter === 'alpha-a-z'){
      setPd(pd.sort((a, b) => a.title.localeCompare(b.title)));
    } else if(fliter === 'alpha-z-a'){
      setPd(pd.sort((a, b) => b.title.localeCompare(a.title)));
    }

    let endOffset = imagesOffset + 8;
    setCurrentImages(pd.slice(imagesOffset, endOffset));
    setPageCount(Math.ceil(pd.length / 8));
  }, [pd,fliter,imagesOffset]);

  if(!currentImages) return;

  return (
    <>
      <Head>
        <title>Nextjs Shopify | Our Products</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='mt-20'>
        <h2 className="text-xl md:text-2xl text-center mt-24 md:mt-32 mb-0">Our Products</h2>
        <div className='px-4 md:px-12 pt-8 md:pt-12 flex gap-2 justify-end items-center'>
          <label>Sort By: </label>
          <select onChange={(el) => filterChangeValue(el)} className='lg:flex items-center text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700'>
            <option defaultValue="selected">Select filter</option>
            <option value={"rating"}>Rating</option>
            <option value={"price-low-high"}>Price, Low-to-High</option>
            <option value={"price-high-low"}>Price, High-to-Low</option>
            <option value={"alpha-a-z"}>Alphabetically, A-Z</option>
            <option value={"alpha-z-a"}>Alphabetically, Z-A</option>
          </select>
        </div>
        
        <div className="pagination px-4 md:px-12 py-8 md:py-12 plp-product-listing">
          <div className="productsList">
            {currentImages.map((product) => {
              return <ProductCard key={product.id} product={product} />;
            })}
          </div>
          <ReactPaginate
            breakLabel="..."
            nextLabel={<GrNext />}
            onPageChange={handlePageClick}
            pageRangeDisplayed={5}
            pageCount={pageCount}
            previousLabel={<GrPrevious />}
            renderOnZeroPageCount={null}
            breakClassName={"page-item"}
            breakLinkClassName={"page-link"}
            containerClassName={"pagination"}
            pageClassName={"page-item"}
            pageLinkClassName={"page-link"}
            previousClassName={"page-item"}
            previousLinkClassName={"page-link"}
            nextClassName={"page-item"}
            nextLinkClassName={"page-link"}
            activeClassName={"active"}
          />
        </div>
      </div>
    </>
  )
}

export const getServerSideProps = async () => {
  const data = await getProducts(50);
  if(data.products.nodes.length === 0) return { props: {products: []}};
  return { props: { products : data.products.nodes } };
};

export default Product